package br.com.lotto.service.frequencia.analise;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.lotto.dao.MegaSenaRepository;
import br.com.lotto.dto.Configuracoes;
import br.com.lotto.entity.Megasena;
import br.com.lotto.service.Analize;

@Service
public class AnaliseFrequencia implements Analize {

	private Configuracoes configuracoes = new Configuracoes();

	@Autowired
	private MegaSenaRepository megaSenaRepository;

	@Override
	public void init() {
		Long countSorteio = this.megaSenaRepository.count();
		AtomicInteger i = new AtomicInteger(1800);
		List<AnaliseFreqResult> listaResultado = new ArrayList<>();
		for (; i.get() <= countSorteio.intValue(); i.incrementAndGet()) {
			Collection<Object[]> listaFrequ = this.megaSenaRepository.getFrequencia(i.get());
			// lista colculada de frequencias, de acordo com o conurso passado
			Megasena jogoMegaSena = this.megaSenaRepository.getMegaSena(i.get() + 1);
			listaFrequ.stream().forEach(f -> {

				Object[] freq = f;
				listaResultado.add(new AnaliseFreqResult(i.get(), ((Integer) freq[0]).intValue(),
						((BigInteger) freq[1]).intValue(), (i.get() / ((BigInteger) freq[1]).intValue())));

				System.out.println("Sorteio : " + i.get() + " - Número : " + freq[0] + " - Frequência : " + freq[1]
						+ " ---- Cálculo média : " + i.get() / ((BigInteger) freq[1]).intValue());

			});

		}
		Map<Integer, Long> result = listaResultado.stream().collect(
				Collectors.groupingBy(
						AnaliseFreqResult::getNumero, Collectors.counting()
				));
		
		result.entrySet().stream().forEach(f->{
			System.out.println(f.getValue());
		});
	}

	public Configuracoes getConfigDefault() {

		// configuracoes.setMaisAtrazado(getnumRand());
		this.configuracoes.setMaisFrequente(
				this.configuracoes.getMaisFrequente() <= 60 && this.configuracoes.getMenosFrequente() == 60
						? this.configuracoes.getMaisFrequente() + 1 : this.configuracoes.getMaisFrequente());
		// configuracoes.setMenosAtrazado(getnumRand());
		this.configuracoes.setMenosFrequente(
				this.configuracoes.getMenosFrequente() < 60 ? this.configuracoes.getMenosFrequente() + 1 : 1);
		return configuracoes;
	}

	private class AnaliseFreqResult {
		private Integer Sorteio;
		private Integer numero;
		private Integer frequencia;
		private Integer media;

		public Integer getSorteio() {
			return Sorteio;
		}

		public void setSorteio(Integer sorteio) {
			Sorteio = sorteio;
		}

		public Integer getNumero() {
			return numero;
		}

		public void setNumero(Integer numero) {
			this.numero = numero;
		}

		public Integer getFrequencia() {
			return frequencia;
		}

		public void setFrequencia(Integer frequencia) {
			this.frequencia = frequencia;
		}

		public Integer getMedia() {
			return media;
		}

		public void setMedia(Integer media) {
			this.media = media;
		}

		public AnaliseFreqResult(Integer sorteio, Integer numero, Integer frequencia, Integer media) {
			super();
			Sorteio = sorteio;
			this.numero = numero;
			this.frequencia = frequencia;
			this.media = media;
		}

	}

}
